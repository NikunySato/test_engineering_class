<?xml version="1.0" encoding="UTF-8"?>
<pmd xmlns="http://pmd.sourceforge.net/report/2.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/report/2.0.0 http://pmd.sourceforge.net/report_2_0_0.xsd"
    version="6.21.0" timestamp="2020-07-24T11:49:14.823">
<file name="C:\projetos\test_engineering_class\pmd-practice\src\main\java\practice\pmd\BestPracticesSamples.java">
<violation beginline="7" endline="7" begincolumn="13" endcolumn="39" rule="OneDeclarationPerLine" ruleset="Best Practices" package="practice.pmd" class="BestPracticesSamples" variable="VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd-6.21.0/pmd_rules_java_bestpractices.html#onedeclarationperline" priority="4">
Use one line for each declaration, it enhances code readability.
</violation>
<violation beginline="10" endline="10" begincolumn="13" endcolumn="21" rule="UseCollectionIsEmpty" ruleset="Best Practices" package="practice.pmd" class="BestPracticesSamples" method="loop" externalInfoUrl="https://pmd.github.io/pmd-6.21.0/pmd_rules_java_bestpractices.html#usecollectionisempty" priority="3">
Substitute calls to size() == 0 (or size() != 0, size() &gt; 0, size() &lt; 1) with calls to isEmpty()
</violation>
<violation beginline="13" endline="15" begincolumn="13" endcolumn="13" rule="ForLoopCanBeForeach" ruleset="Best Practices" package="practice.pmd" class="BestPracticesSamples" method="loop" externalInfoUrl="https://pmd.github.io/pmd-6.21.0/pmd_rules_java_bestpractices.html#forloopcanbeforeach" priority="3">
This for loop can be replaced by a foreach loop
</violation>
<violation beginline="20" endline="20" begincolumn="13" endcolumn="13" rule="UnusedLocalVariable" ruleset="Best Practices" package="practice.pmd" class="BestPracticesSamples" method="printName" variable="i" externalInfoUrl="https://pmd.github.io/pmd-6.21.0/pmd_rules_java_bestpractices.html#unusedlocalvariable" priority="3">
Avoid unused local variables such as 'i'.
</violation>
<violation beginline="24" endline="24" begincolumn="18" endcolumn="22" rule="UnusedPrivateMethod" ruleset="Best Practices" package="practice.pmd" class="BestPracticesSamples" method="foo" externalInfoUrl="https://pmd.github.io/pmd-6.21.0/pmd_rules_java_bestpractices.html#unusedprivatemethod" priority="3">
Avoid unused private methods such as 'foo()'.
</violation>
</file>
<file name="C:\projetos\test_engineering_class\pmd-practice\src\main\java\practice\pmd\CodeStyle.java">
<violation beginline="3" endline="26" begincolumn="8" endcolumn="1" rule="DataClass" ruleset="Design" package="practice.pmd" class="CodeStyle" externalInfoUrl="https://pmd.github.io/pmd-6.21.0/pmd_rules_java_design.html#dataclass" priority="3">
The class 'CodeStyle' is suspected to be a Data Class (WOC=0.000%, NOPA=1, NOAM=4, WMC=4)
</violation>
<violation beginline="5" endline="5" begincolumn="39" endcolumn="47" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="practice.pmd" class="CodeStyle" externalInfoUrl="https://pmd.github.io/pmd-6.21.0/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 100000000 should separate every third digit with an underscore
</violation>
<violation beginline="7" endline="7" begincolumn="20" endcolumn="29" rule="FieldNamingConventions" ruleset="Code Style" package="practice.pmd" class="CodeStyle" variable="first_name" externalInfoUrl="https://pmd.github.io/pmd-6.21.0/pmd_rules_java_codestyle.html#fieldnamingconventions" priority="1">
The field name 'first_name' doesn't match '[a-z][a-zA-Z0-9]*'
</violation>
<violation beginline="9" endline="9" begincolumn="20" endcolumn="28" rule="FieldNamingConventions" ruleset="Code Style" package="practice.pmd" class="CodeStyle" variable="last_name" externalInfoUrl="https://pmd.github.io/pmd-6.21.0/pmd_rules_java_codestyle.html#fieldnamingconventions" priority="1">
The field name 'last_name' doesn't match '[a-z][a-zA-Z0-9]*'
</violation>
<violation beginline="11" endline="13" begincolumn="12" endcolumn="5" rule="MethodNamingConventions" ruleset="Code Style" package="practice.pmd" class="CodeStyle" method="getFirst_name" externalInfoUrl="https://pmd.github.io/pmd-6.21.0/pmd_rules_java_codestyle.html#methodnamingconventions" priority="1">
The instance method name 'getFirst_name' doesn't match '[a-z][a-zA-Z0-9]*'
</violation>
<violation beginline="15" endline="17" begincolumn="12" endcolumn="5" rule="MethodNamingConventions" ruleset="Code Style" package="practice.pmd" class="CodeStyle" method="setFirst_name" externalInfoUrl="https://pmd.github.io/pmd-6.21.0/pmd_rules_java_codestyle.html#methodnamingconventions" priority="1">
The instance method name 'setFirst_name' doesn't match '[a-z][a-zA-Z0-9]*'
</violation>
<violation beginline="15" endline="15" begincolumn="38" endcolumn="47" rule="FormalParameterNamingConventions" ruleset="Code Style" package="practice.pmd" class="CodeStyle" method="setFirst_name" variable="first_name" externalInfoUrl="https://pmd.github.io/pmd-6.21.0/pmd_rules_java_codestyle.html#formalparameternamingconventions" priority="1">
The method parameter name 'first_name' doesn't match '[a-z][a-zA-Z0-9]*'
</violation>
<violation beginline="19" endline="21" begincolumn="12" endcolumn="5" rule="MethodNamingConventions" ruleset="Code Style" package="practice.pmd" class="CodeStyle" method="getLast_name" externalInfoUrl="https://pmd.github.io/pmd-6.21.0/pmd_rules_java_codestyle.html#methodnamingconventions" priority="1">
The instance method name 'getLast_name' doesn't match '[a-z][a-zA-Z0-9]*'
</violation>
<violation beginline="23" endline="25" begincolumn="12" endcolumn="5" rule="MethodNamingConventions" ruleset="Code Style" package="practice.pmd" class="CodeStyle" method="setLast_name" externalInfoUrl="https://pmd.github.io/pmd-6.21.0/pmd_rules_java_codestyle.html#methodnamingconventions" priority="1">
The instance method name 'setLast_name' doesn't match '[a-z][a-zA-Z0-9]*'
</violation>
<violation beginline="23" endline="23" begincolumn="37" endcolumn="45" rule="FormalParameterNamingConventions" ruleset="Code Style" package="practice.pmd" class="CodeStyle" method="setLast_name" variable="last_name" externalInfoUrl="https://pmd.github.io/pmd-6.21.0/pmd_rules_java_codestyle.html#formalparameternamingconventions" priority="1">
The method parameter name 'last_name' doesn't match '[a-z][a-zA-Z0-9]*'
</violation>
</file>
<file name="C:\projetos\test_engineering_class\pmd-practice\src\main\java\practice\pmd\DesignSamples.java">
<violation beginline="18" endline="20" begincolumn="9" endcolumn="9" rule="SimplifyBooleanReturns" ruleset="Design" package="practice.pmd" class="DesignSamples" method="bar" externalInfoUrl="https://pmd.github.io/pmd-6.21.0/pmd_rules_java_design.html#simplifybooleanreturns" priority="3">
Avoid unnecessary if..then..else statements when returning booleans
</violation>
<violation beginline="18" endline="18" begincolumn="15" endcolumn="20" rule="LogicInversion" ruleset="Design" package="practice.pmd" class="DesignSamples" method="bar" externalInfoUrl="https://pmd.github.io/pmd-6.21.0/pmd_rules_java_design.html#logicinversion" priority="3">
Use opposite operator instead of the logic complement operator.
</violation>
<violation beginline="19" endline="19" begincolumn="13" endcolumn="25" rule="OnlyOneReturn" ruleset="Code Style" package="practice.pmd" class="DesignSamples" method="bar" externalInfoUrl="https://pmd.github.io/pmd-6.21.0/pmd_rules_java_codestyle.html#onlyonereturn" priority="3">
A method should have only one exit point, and that should be the last statement in the method
</violation>
<violation beginline="24" endline="62" begincolumn="12" endcolumn="5" rule="CyclomaticComplexity" ruleset="Design" package="practice.pmd" class="DesignSamples" method="highCyclo" externalInfoUrl="https://pmd.github.io/pmd-6.21.0/pmd_rules_java_design.html#cyclomaticcomplexity" priority="3">
The method 'highCyclo()' has a cyclomatic complexity of 12.
</violation>
</file>
<file name="C:\projetos\test_engineering_class\pmd-practice\src\main\java\practice\pmd\PerformanceSamples.java">
<violation beginline="8" endline="8" begincolumn="11" endcolumn="12" rule="UseStringBufferForStringAppends" ruleset="Performance" package="practice.pmd" class="PerformanceSamples" method="bar" externalInfoUrl="https://pmd.github.io/pmd-6.21.0/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="13" endline="13" begincolumn="16" endcolumn="24" rule="UseIndexOfChar" ruleset="Performance" package="practice.pmd" class="PerformanceSamples" method="returnIndex" externalInfoUrl="https://pmd.github.io/pmd-6.21.0/pmd_rules_java_performance.html#useindexofchar" priority="3">
String.indexOf(char) is faster than String.indexOf(String).
</violation>
</file>
</pmd>
